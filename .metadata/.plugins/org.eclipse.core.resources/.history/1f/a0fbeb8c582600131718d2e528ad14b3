#include <iostream>
#include <SDL2/SDL.h>

using namespace std;


/**
 * Log an SDL error to the specified output stream
 * @param os The output stream to write the message to
 * @param message The SDL error message
 */
void logSDLError (ostream &os, const string &message) {
	os << message << " error: " << SDL_GetError() << endl;
}

/**
 * The main thread of execution
 * @param argc Number of command-line arguments
 * @param argv Array of command-line arguments
 */
int main (int argc, char **argv) {
	const int SCREEN_WIDTH = 640;
	const int SCREEN_HEIGHT = 480;

	// Initialize the various SDL subsystems we want to use
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0) { /* Bare minimum is SDL_INIT_VIDEO */
		cout << "SDL_Init Error: " << SDL_GetError() << endl;
		return 1;
	}	

	// Open a window to display our renderings in
	SDL_Window *window = SDL_CreateWindow("Hello World!"/*title*/, 100/*x*/, 100/*y*/, 640/*w*/, 480/*h*/, SDL_WINDOW_SHOWN);
	if (window == nullptr/* New C++11 dedicated null pointer */) {
		cout << "SDL_CreateWindow Error: " << SDL_GetError() << endl;
		return 1;
	}

	// Create a renderer to draw to the window
	SDL_Renderer *renderer = SDL_CreateRenderer(window, -1/*index of rendering drive to be used*/,
		SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
	if (renderer == nullptr) {
		cout << "SDL_CreateRenderer Error: " << SDL_GetError() << endl;
		return 1;
	}

	// Load a bitmap image into memory...
	SDL_Surface *bmp = SDL_LoadBMP("./hello.bmp");
	if (bmp == nullptr) {
		cout << "SDL_LoadBMP Error: " << SDL_GetError() << endl;
		return 1;
	}
	// ...and then upload it to the rendering platform we're using
	SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, bmp);
	SDL_FreeSurface(bmp); /* Once the texture has been created, the surface can be freed */
	if (texture == nullptr) {
		cout << "SDL_CreateTextureFromSurface Error: " << SDL_GetError() << endl;
		return 1;
	}

	// Draw the texture on the screen
	SDL_RenderClear(renderer);
	SDL_RenderCopy(renderer, texture, NULL, NULL); /* Render the texture */
	SDL_RenderPresent(renderer); /* Present the updated screen to the user */

	// Keep the window open for 2 seconds; so we can actually view the results
	SDL_Delay(2000);

	// Clean-up
	SDL_DestroyTexture(texture);
	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);

	SDL_Quit();

	return 0;
}
